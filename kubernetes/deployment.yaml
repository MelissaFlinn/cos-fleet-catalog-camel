kind: Deployment
apiVersion: apps/v1
metadata:
#  annotations:
#    prometheus.io/port: '8080'
#    prometheus.io/path: /q/metrics
#    prometheus.io/scheme: http
#    prometheus.io/scrape: 'true'
  name: cos-fleet-catalog-camel
  labels:
    app.kubernetes.io/name: cos-fleet-catalog-camel
    app.kubernetes.io/part-of: kas-fleet-manager
    # app.kubernetes.io/version: brain
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cos-fleet-catalog-camel
      app.kubernetes.io/part-of: kas-fleet-manager
      # app.kubernetes.io/version: brain
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cos-fleet-catalog-camel
        app.kubernetes.io/part-of: kas-fleet-manager
        # app.kubernetes.io/version: brain
#      annotations:
#        prometheus.io/path: /q/metrics
#        prometheus.io/port: '8080'
#        prometheus.io/scheme: http
#        prometheus.io/scrape: 'true'
    spec:
      containers:
        - resources: {}

          name: cos-fleet-catalog-camel
          livenessProbe:
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            timeoutSeconds: 10
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            timeoutSeconds: 10
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          imagePullPolicy: Always
          terminationMessagePolicy: File
          image: 'quay.io/lburgazzoli/ccs:latest'
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
